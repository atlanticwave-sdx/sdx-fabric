name: Build & Publish (TestPyPI â†’ PyPI)

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      target:
        description: "Choose where to publish"
        required: true
        default: "testpypi"
        type: choice
        options: [testpypi, pypi]

permissions:
  id-token: write
  contents: read

env:
  SDX_BASE_URL: https://sdxapi.atlanticwave-sdx.ai      # prod default
  TEST_SDX_BASE_URL: https://190.103.184.194            # test default

jobs:
  pr-build:
    name: Build on pull_request (no publish)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdx-client
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0          # needed for setuptools_scm
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install build tool
        run: python -m pip install --upgrade build
      - name: Build sdist and wheel
        run: python -m build

  build:
    name: Build package artifacts
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdx-client
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install build tool
        run: python -m pip install --upgrade build
      - name: Build sdist and wheel
        run: python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    name: Publish to TestPyPI
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'testpypi'))
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdx-client
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # need repo + tags for git describe guard
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Dynamically set runtime base URL for test
      - name: Set SDX_BASE_URL for TestPyPI
        run: echo "SDX_BASE_URL=${TEST_SDX_BASE_URL}" >> "$GITHUB_ENV"

      # Guard: must NOT be a clean release tag
      - name: Ensure NOT a final release tag
        run: |
          python - <<'PY'
          import subprocess, re, sys
          ref = subprocess.check_output(["git","describe","--tags","--dirty","--always"], text=True).strip()
          if re.fullmatch(r"v\d+\.\d+\.\d+", ref):
              sys.exit(f"Ref {ref} is a final tag; TestPyPI expects a dev/pre build.")
          print(f"OK: {ref} is not a final tag")
          PY

      - name: Publish to TestPyPI (OIDC Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'pypi'))
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdx-client
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # need repo + tags for git describe guard
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Guard: must BE a clean release tag
      - name: Ensure final release tag (vX.Y.Z)
        run: |
          python - <<'PY'
          import subprocess, re, sys
          ref = subprocess.check_output(["git","describe","--tags","--dirty","--always"], text=True).strip()
          if not re.fullmatch(r"v\d+\.\d+\.\d+", ref):
              sys.exit(f"Ref {ref} is not a clean final tag vX.Y.Z (got {ref}).")
          print(f"OK: {ref} is a final tag")
          PY

      - name: Publish to PyPI (OIDC Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true

